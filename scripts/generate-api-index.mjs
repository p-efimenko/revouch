import { readFileSync, writeFileSync, readdirSync, existsSync } from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// Function to generate index file for a directory
function generateIndexFile(dirPath, fileName = 'index.ts') {
  const fullPath = path.join(dirPath, fileName)

  // Read the main file to extract exports
  const mainFile = path.join(dirPath, path.basename(dirPath) + '.ts')

  if (!existsSync(mainFile)) {
    console.log(`Main file not found: ${mainFile}`)
    return
  }

  const content = readFileSync(mainFile, 'utf8')

  // Extract function exports
  const functionExports = []

  // Match function exports
  const functionMatches = content.match(/export const \w+ = async/g)
  if (functionMatches) {
    functionMatches.forEach(match => {
      const funcName = match.match(/export const (\w+) = async/)[1]
      functionExports.push(funcName)
    })
  }

  // Generate index content
  const indexContent = `/**
 * Generated by generate-api-index.mjs
 * Do not edit manually.
 */

${functionExports.length > 0 ? `export {\n  ${functionExports.join(',\n  ')},\n} from './${path.basename(mainFile, '.ts')}'` : ''}
`

  writeFileSync(fullPath, indexContent)
  console.log(`Generated index file: ${fullPath}`)
}

// Generate index files for each API directory
const apiDir = path.join(__dirname, '..', 'src', 'api')

// Get all subdirectories in api folder
const subdirs = readdirSync(apiDir, { withFileTypes: true })
  .filter(dirent => dirent.isDirectory())
  .map(dirent => dirent.name)

subdirs.forEach(subdir => {
  const subdirPath = path.join(apiDir, subdir)
  generateIndexFile(subdirPath)
})

console.log('API index files generated successfully!')

